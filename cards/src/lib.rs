
#[allow(unused_imports)]
use log::{error, warn, info, debug, trace};
#[allow(unused_imports)]
use anyhow::{Result, Error, bail, anyhow, Context};

use std::time::Instant;
use std::path::Path;

#[macro_use] extern crate lazy_static;
// use http::StatusCode;
use serde_json::{Value, Map, Number};

use futures::{
    select,
    stream::{
        FuturesUnordered,
        StreamExt,
    },
};

mod fetch;
mod save;

// ============================================================================
// ============================================================================

pub struct Arg<'a> {
    pub auth: &'a str,
    pub ids: &'a ids::Ret, 
    pub out_dir: &'a Path, 
    pub thread_limit: usize,
    pub retry_count: usize,
}

macro_rules! push_fut_fetch {
    ($fut_queue: expr, $client: expr, $arg: expr, $id: expr) => {
        let arg = OpArg::Fetch (fetch::Arg {
            client: $client,
            auth: $arg.auth.to_owned(),
            id: $id,
            retry_count: $arg.retry_count,
        });
        let fut = op(arg);
        $fut_queue.push(fut);
    };
}

macro_rules! push_fut_save {
    ($fut_queue: expr, $json: expr, $id: expr, $out_dir: expr) => {
        let arg = OpArg::Save (save::Arg {
            id: $id,
            json: $json,
            out_dir: $out_dir
        });
        let fut = op(arg);
        $fut_queue.push(fut);
    };
}

pub async fn fetch_and_save<'a>(arg: Arg<'a>) -> Result<()> {
    let now = Instant::now();

    let mut id_i = 0;
    let ids_len = arg.ids.len();
    let mut ids = arg.ids.iter().collect::<Vec<&u64>>();
    ids.sort_unstable();

    let mut fut_queue = FuturesUnordered::new();
    while id_i < arg.thread_limit && id_i < ids_len {
        let client = reqwest::Client::new();
        let id = *ids[id_i];
        push_fut_fetch!(fut_queue, client, arg, id);
        id_i += 1;
    }
    // let mut elapsed_qt: u64 = 0;
    // let mut remained_qt = arg.diaps_ret.diaps.iter()
    //     .map(|diap| 
    //         (diap.count + arg.items_per_page as u64 - 1) / arg.items_per_page as u64
    //     )
    //     .sum::<u64>();
    //
    // let mut ids: Ret = HashSet::new(); 
    loop {
        select! {
            ret = fut_queue.select_next_some() => {
                match ret {
                    Err(err) => {
                        bail!("error: {}", err);
                    },
                    Ok(ret) => {
                        match ret {
                            OpRet::Fetch(ret) => {
                                push_fut_save!(fut_queue, ret.json, ret.id, arg.out_dir);
                                if id_i < ids_len {
                                    let client = reqwest::Client::new();
                                    let id = *ids[id_i];
                                    push_fut_fetch!(fut_queue, client, arg, id);
                                    id_i += 1;
                                }
                            },
                            OpRet::Save(_) => {},
                        }
                    },
                }
            },
            complete => {
                break;
            },
        }
    }
    // info!("{} ms, ids.len(): {}", 
    //     Instant::now().duration_since(now).as_millis(), 
    //     ids.len(),
    // );
    
    todo!();
    Ok(())
}

enum OpArg<'a> {
    Fetch(fetch::Arg),
    Save(save::Arg<'a>),
}

enum OpRet {
    Fetch(fetch::Ret),
    Save(save::Ret),
}

async fn op<'a>(arg: OpArg<'a>) -> Result<OpRet> {
    match arg {
        OpArg::Fetch(arg) => {
            let ret = fetch::run(arg).await?;
            Ok(OpRet::Fetch(ret))
        },
        OpArg::Save(arg) => {
            let ret = save::run(arg).await?;
            Ok(OpRet::Save(ret))
        },
    }
}

// ============================================================================
// ============================================================================
// ============================================================================

#[cfg(test)]
mod tests {

    #[allow(unused_imports)]
    use log::{error, warn, info, debug, trace};
    use super::*;
    use std::sync::Once;
    static INIT: Once = Once::new();
    fn init() {
        INIT.call_once(|| env_logger::init());
    }
    
    use std::collections::HashSet;

    #[tokio::test]
    async fn it_works() -> Result<()> {
        init();

        let mut ids: ids::Ret = HashSet::new();
        let ids_vec: Vec<u64> = vec![
      549065,
      55244036,
      68088711,
      152976896,
      172642507,
      173577377,
      175867197,
      178703956,
      183810244,
      195507023,
      201956754,
      211186685,
      211513556,
      263245368,
      272551878,
      283909081,
      311037101,
      336852605,
      339159418,
      354956116,
      359070652,
      367107836,
      368489700,
      372908479,
      396304749,
      397630376,
      420047081,
      428182428,
      429045159,
      429672804,
      439248679,
      454897320,
      463351046,
      464766854,
      467970514,
      479384746,
      479846029,
      482187293,
      483281551,
      484845365,
      485318724,
      485983310,
      486561501,
      488706383,
      492613091,
      500023295,
      500198344,
      519057731,
      526264804,
      526787689,
      527885004,
      528430503,
      531927185,
      534279946,
      537156552,
      541125985,
      541265107,
      563494904,
      563501243,
      577822284,
      580463617,
      585507587,
      585769890,
      589846700,
      590150226,
      590846021,
      593390765,
      601333675,
      619690126,
      621276255,
      621680449,
      622789649,
      624926344,
      627205114,
      629324840,
      633133188,
      633420571,
      634877947,
      637866613,
      639467309,
      643615874,
      646106272,
      647346741,
      654147874,
      658730495,
      660106379,
      673571324,
      675321304,
      676848421,
      678875381,
      683802090,
      684743250,
      687839482,
      690601700,
      696565640,
      701748190,
      706313225,
      715686253,
      725949598,
      726297851,
      730844820,
      733487326,
      733820714,
      735554367,
      736349530,
      738420519,
      746190313,
      746969618,
      756320480,
      758886550,
      759531553,
      759974323,
      760618416,
      761034910,
      762422669,
      762796302,
      771485130,
      774388436,
      774586720,
      782071814,
      782715918,
      784328009,
      788461612,
      793846111,
      795073653,
      800877891,
      802404028,
      803419363,
      805139923,
      806517487,
      813930711,
      814697548,
      815254415,
      815426159,
      815686254,
      819519997,
      821711970,
      821781213,
      823655307,
      824266532,
      824704961,
      827284996,
      827387341,
      827967719,
      829205206,
      829399347,
      833567549,
      839659583,
      841557754,
      845233758,
      846754329,
      850943942,
      853102206,
      853429519,
      853563998,
      853692450,
      854039978,
      855646541,
      857419777,
      858007915,
      858253579,
      858928614,
      859912848,
      861360906,
      862056029,
      862841856,
      866229818,
      867483112,
      868802117,
      870815777,
      875408282,
      875932223,
      878566905,
      879194206,
      879678717,
      879762766,
      881011602,
      883593664,
      885506860,
      886591164,
      886823451,
      889235717,
      890129239,
      890721335,
      893146195,
      895806485,
      898396076,
      898872718,
      900845410,
      900892357,
      901653931,
      902512791,
      902659722,
      904473559,
      907129463,
      907172575,
      909075051,
      910178512,
      913057261,
      913762104,
      914149190,
      916360302,
      916759680,
      916987536,
      919388750,
      919490567,
      923243793,
      924160482,
      924567367,
      924860720,
      925252267,
      925541055,
      926954633,
      927758590,
      928259801,
      929675966,
      930003645,
      930122439,
      930509294,
      931467907,
      932067616,
      932746615,
      933937190,
      935097594,
      935389878,
      936620779,
      936807956,
      937592656,
      937646210,
      937651744,
      937714318,
      937765435,
      939204224,
      939580661,
      940038825,
      940486053,
      940534129,
      940554416,
      941368514,
      941675775,
      941729743,
      942238782,
      943994563,
      944046715,
      944179345,
      944419269,
      944516782,
      944651274,
      945311174,
      945847492,
      946267941,
      946859546,
      947001247,
      947082413,
      947531342,
      947931916,
      947937455,
      948526589,
      948655640,
      948884253,
      949104406,
      949394221,
      949695096,
      950388804,
      950474146,
      951697682,
      952058729,
      952881489,
      953054705,
      953767517,
      954320440,
      954946947,
      955983710,
      956507346,
      956609977,
      957149824,
      957429309,
      957648265,
      957665084,
      958095150,
      958194097,
      958394596,
      958483900,
      958653466,
      959012834,
      959067037,
      959589237,
      960402404,
      960511587,
      961213721,
      961591325,
      961758294,
      961894180,
      962084628,
      962334362,
      964690432,
      964760895,
      964795315,
      964917743,
      965180948,
      965376564,
      965597297,
      965770768,
      966037948,
      966741300,
      967051376,
      967202418,
      967701144,
      969085749,
      969354038,
      970082199,
      970476270,
      970495253,
      970781469,
      971330653,
      971986878,
      972516523,
      972560007,
      972565310,
      973643003,
      973821905,
      974317377,
      974757824,
      974788473,
      974895459,
      976162991,
      977559715,
      978155069,
      978380255,
      978875357,
      979082140,
      979380826,
      980082004,
      980159689,
      980286373,
      980480361,
      981567382,
      981643884,
      982004492,
      982437098,
      983286970,
      983413749,
      983463551,
      984011347,
      984056457,
      984440864,
      984676560,
      984809182,
      985147075,
      986510156,
      986796669,
      986820140,
      986995111,
      987799672,
      987808714,
      987895461,
      988261135,
      988555892,
      989516058,
      989847736,
      990418114,
      990580923,
      991154593,
      991659680,
      992413414,
      992435695,
      992914843,
      993485341,
      993689037,
      993862044,
      994751899,
      995168385,
      995221433,
      995663548,
      996226750,
      996644545,
      997075111,
      997617100,
      997811638,
      998817654,
      998932406,
      1000321450,
      1000880733,
      1002104068,
      1002670600,
      1003665385,
      1003711439,
      1005232923,
      1005696366,
      1006066093,
      1006722909,
      1006830293,
      1007056777,
      1007893284,
      1008231676,
      1009244158,
      1009461629,
      1009527790,
      1009565227,
      1009708466,
      1010092519,
      1010170318,
      1010739554,
      1011489466,
      1011632693,
      1012260704,
      1012447630,
      1012743654,
      1012958181,
      1014084870,
      1014936395,
      1015045994,
      1015655032,
      1017840294,
      1018344641,
      1018913642,
      1019311320,
      1021982249,
      1022609665,
      1022740816,
      1023046566,
      1023862728,
      1024476923,
      1025766994,
      1028685789,
      1028852468,
      1029081827,
      1029400497,
      1030170168,
      1030231598,
      1031888165,
      1032724338,
      1032750577,
      1032758089,
      1032767956,
      1033297897,
      1033657996,
      1033722947,
      1034503668,
      1034961059,
      1035455120,
      1035539182,
      1035594307,
      1035680496,
      1036331417,
      1036755150,
      1036996928,
      1037729511,
      1038384970,
      1038556221,
      1038642904,
      1040912362,
      1041098462,
      1041476348,
      1041982189,
      1042013270,
      1042419500,
      1042615551,
      1042975492,
      1043166160,
      1043315711,
      1043962860,
      1044014108,
      1045637338,
      1046549863,
      1046743480,
      1046905227,
      1047876076,
      1048133296,
      1049210125,
      1049887838,
      1049968283,
      1050122814,
      1050843720,
      1050930144,
      1051389611,
      1051434410,
      1051608534,
      1051942006,
      1052271901,
      1052430338,
      1053167481,
      1053487966,
      1054021976,
      1055155979,
      1056610338,
      1057586070,
      1057718151,
      1057719978,
      1058085391,
      1058373117,
      1058744730,
      1059160308,
      1059655938,
      1059847047,
      1060105809,
      1060604772,
      1060781715,
      1061449230,
      1061883743,
      1062088244,
      1063601848,
      1064748517,
      1065068613,
      1065292246,
      1065545261,
      1065825007,
      1066036510,
      1066593608,
      1066608799,
      1067022749,
      1067073391,
      1067105947,
      1067497560,
      1067544758,
      1068939597,
      1069723444,
      1069845882,
      1070100316,
      1071051303,
      1072716768,
      1073387286,
      1073512775,
      1073617265,
      1074680957,
      1075367509,
      1075619647,
      1076088262,
      1077101418,
      1077314845,
      1077583001,
      1077943880,
      1078501065,
      1079168449,
      1079387085,
      1079544523,
      1079630477,
      1080102467,
      1080331023,
      1081631624,
      1081845276,
      1082614649,
      1083134401,
      1083322176,
      1085321924,
      1085740240,
      1086540434,
      1086600471,
      1086699513,
      1088029268,
      1088221656,
      1088240153,
      1088346012,
      1088381644,
      1088826950,
      1089111643,
      1089431282,
      1089455813,
      1089579363,
      1089924696,
      1090449356,
      1091307054,
      1091555356,
      1091596339,
      1093103133,
      1093325693,
      1093813335,
      1095056992,
      1095106430,
      1095182295,
      1095737104,
      1096176247,
      1096220915,
      1096468219,
      1096498304,
      1096828418,
      1096838736,
      1096940519,
      1097137778,
      1097479418,
      1097960019,
      1098846502,
      1099561642,
      1099650061,
      1101382323,
      1103871731,
      1104027293,
      1104826497,
      1104834871,
      1105314240,
      1106414202,
      1107077944,
      1107522980,
      1108120256,
      1108602713,
      1108653579,
      1109086353,
      1109288003,
      1110310295,
      1110878484,
      1111052354,
      1111988625,
      1112621542,
      1113059850,
      1113408080,
      1113853345,
      1114216635,
      1114270822,
      1114522729,
      1114963960,
      1115444318,
      1116573305,
      1116695319,
      1116964917,
      1117837599,
      1117921378,
      1118199407,
      1118229012,
      1118565416,
      1118863269,
      1119111381,
      1119265632,
      1119433187,
      1119763613,
      1120095147,
      1120160779,
      1121374557,
      1121517292,
      1121837156,
      1123365293,
      1124952122,
      1126131641,
      1126615045,
      1127658219,
      1127731784,
      1128108356,
      1128134048,
      1128496841,
      1129132557,
      1129366589,
      1129527520,
      1130654284,
      1131475332,
      1131535945,
      1132517161,
      1132673822,
      1133864274,
      1135293613,
      1136307709,
      1136596583,
      1137781673,
      1138124041,
      1138251417,
      1138434100,
      1139265055,
      1139312693,
      1139396066,
      1140109655,
      1141181684,
      1141434925,
      1142214522,
      1142299592,
      1142379285,
      1143447741,
      1143471673,
      1143524325,
      1143751736,
      1144614623,
      1145245246,
      1148308077,
      1148915813,
      1149334112,
      1150139576,
      1150605683,
      1151871777,
      1152132320,
      1152207786,
      1152224456,
      1152235318,
      1152272661,
      1152523587,
      1153291782,
      1153308724,
      1153409153,
      1153443917,
      1153768789,
      1153917623,
      1154013446,
      1154591332,
      1154722707,
      1154808697,
      1156009152,
      1156634336,
      1156896099,
      1158104573,
      1158223525,
      1158244659,
      1158536444,
      1158635273,
      1158831317,
      1159233535,
      1160281752,
      1161567746,
      1162054171,
      1162230170,
      1162313751,
      1162353114,
      1163917683,
      1164228657,
      1164628082,
      1164657116,
      1164686621,
      1165090926,
      1165670946,
      1166688615,
      1166763013,
      1166768393,
      1167715853,
      1167853201,
      1168170090,
      1168358050,
      1169273413,
      1169853203,
      1169888319,
      1170479595,
      1171251079,
      1171374716,
      1171733095,
      1172510895,
      1172935100,
      1172986608,
      1173064025,
      1173156348,
      1173360802,
      1173651370,
      1174119465,
      1174341941,
      1174656132,
      1175517763,
      1176067676,
      1176147527,
      1176438919,
      1176459221,
      1176900131,
      1177012429,
      1177415474,
      1177849917,
      1178031089,
      1178061607,
      1178285351,
      1178687497,
      1178840479,
      1179368521,
      1179586463,
      1179650650,
      1180533356,
      1180687135,
      1181009545,
      1181274159,
      1182143073,
      1182456675,
      1183254827,
      1183394930,
      1184121073,
      1185064331,
      1185311656,
      1185428091,
      1185433973,
      1185877012,
      1185882645,
      1186220205,
      1187082202,
      1187564102,
      1187612761,
      1188222350,
      1188317507,
      1188404836,
      1188896297,
      1189111271,
      1189475576,
      1189893216,
      1190245926,
      1190309167,
      1190465800,
      1190519003,
      1190552378,
      1190641063,
      1191419700,
      1191682344,
      1192067985,
      1192566903,
      1192945932,
      1193502150,
      1193863245,
      1195285607,
      1195641669,
      1196206157,
      1196250450,
      1196358952,
      1196365736,
      1196898261,
      1197186899,
      1197426950,
      1197714290,
      1199034167,
      1199179009,
      1200157674,
      1200545998,
      1201241676,
      1201553432,
      1202262705,
      1202982924,
      1203046810,
      1203795737,
      1204252333,
      1204271826,
      1204428351,
      1204544604,
      1204728475,
      1205595820,
      1205674292,
      1207012576,
      1207414795,
      1209144428,
      1209415476,
      1209760039,
      1210043987,
      1210267914,
      1210780054,
      1211500051,
      1211894406,
      1212072394,
      1212657779,
      1212686399,
      1212903328,
      1214433794,
      1214802791,
      1214811761,
      1216301477,
      1216502968,
      1216579648,
      1216743836,
      1217303306,
      1217314327,
      1217475920,
      1217573307,
      1219044963,
      1219130140,
      1219248537,
      1219295313,
      1219481826,
      1220329246,
      1220543439,
      1220717008,
      1221462774,
      1221703257,
      1222199238,
      1222482927,
      1222533539,
      1222820622,
      1223300882,
      1223532315,
      1223597212,
      1224046425,
      1224447992,
      1225152497,
      1225191555,
      1225361805,
      1225900330,
      1227502665,
      1228067793,
      1228318659,
      1228364424,
      1228394938,
      1229397873,
      1230900843,
      1231029018,
      1231065708,
      1231182192,
      1231408510,
      1232215393,
      1232623771,
      1233104686,
      1233434481,
      1234251545,
      1234355183,
      1235431641,
      1235531316,
      1235690213,
      1235837258,
      1236087065,
      1236179591,
      1236192425,
      1236240451,
      1236528339,
      1236708967,
      1236835916,
      1236838260,
      1237141422,
      1237750728,
      1237754125,
      1238313656,
      1238546251,
      1238964489,
      1239603891,
      1239705572,
      1239847648,
      1240296335,
      1240557866,
      1240632294,
      1241187744,
      1242020438,
      1242273683,
      1242325166,
      1242462573,
      1243128861,
      1243227185,
      1243317450,
      1243384303,
      1243940419,
      1244176156,
      1245068671,
      1245340988,
      1246082535,
      1246508844,
      1247410938,
      1247755687,
      1247780386,
      1248608298,
      1248725825,
      1248987413,
      1249302614,
      1249460974,
      1250118216,
      1250662121,
      1250894049,
      1251114142,
      1251184507,
      1251536088,
      1251548644,
      1252788929,
      1252907771,
      1253122072,
      1253172693,
      1253334221,
      1254052225,
      1254119248,
      1255116684,
      1255195267,
      1255668381,
      1255729782,
      1256401032,
      1256562560,
      1256722988,
      1257322815,
      1257665810,
      1257814753,
      1258076339,
      1258284656,
      1258321251,
      1258465783,
      1258655385,
      1258682950,
      1258835391,
      1258904356,
      1259345394,
      1259534462,
      1259664317,
      1262328975,
      1262600034,
      1262633475,
      1262844402,
      1263031335,
      1263217678,
      1263966210,
      1264395321,
      1264443680,
      1264687974,
      1264795384,
      1265084770,
      1266029912,
      1266979170,
      1267406333,
      1267834120,
      1268326195,
      1268369412,
      1268744630,
      1269391469,
      1269500991,
      1269534533,
      1269926878,
      1269933390,
      1271210361,
      1271667415,
      1271807067,
      1272751016,
        ];
        for id in ids_vec {
            ids.insert(id);
        }
        let out_dir = &Path::new("out_test");
        let auth = &auth::get().await?;
        let arg = Arg {
            auth,
            ids: &ids,
            out_dir,
            thread_limit: 1,
            retry_count: 3,
        };

        fetch_and_save(arg).await?;

        Ok(())
    }
}

